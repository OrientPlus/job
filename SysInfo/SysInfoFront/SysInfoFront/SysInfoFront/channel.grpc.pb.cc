// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: channel.proto

#include "channel.pb.h"
#include "channel.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace channel {

static const char* ChannelService_method_names[] = {
  "/channel.ChannelService/ProcessList",
  "/channel.ChannelService/DiskInfo",
  "/channel.ChannelService/NetworkActivity",
  "/channel.ChannelService/DeviceInfo",
};

std::unique_ptr< ChannelService::Stub> ChannelService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChannelService::Stub> stub(new ChannelService::Stub(channel, options));
  return stub;
}

ChannelService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessList_(ChannelService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DiskInfo_(ChannelService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NetworkActivity_(ChannelService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeviceInfo_(ChannelService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChannelService::Stub::ProcessList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::channel::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessList_, context, request, response);
}

void ChannelService::Stub::async::ProcessList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessList_, context, request, response, std::move(f));
}

void ChannelService::Stub::async::ProcessList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::PrepareAsyncProcessListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::channel::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::AsyncProcessListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChannelService::Stub::DiskInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::channel::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DiskInfo_, context, request, response);
}

void ChannelService::Stub::async::DiskInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DiskInfo_, context, request, response, std::move(f));
}

void ChannelService::Stub::async::DiskInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DiskInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::PrepareAsyncDiskInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::channel::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DiskInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::AsyncDiskInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDiskInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChannelService::Stub::NetworkActivity(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::channel::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NetworkActivity_, context, request, response);
}

void ChannelService::Stub::async::NetworkActivity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NetworkActivity_, context, request, response, std::move(f));
}

void ChannelService::Stub::async::NetworkActivity(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NetworkActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::PrepareAsyncNetworkActivityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::channel::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NetworkActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::AsyncNetworkActivityRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNetworkActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChannelService::Stub::DeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::channel::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeviceInfo_, context, request, response);
}

void ChannelService::Stub::async::DeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceInfo_, context, request, response, std::move(f));
}

void ChannelService::Stub::async::DeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::PrepareAsyncDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::channel::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeviceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::channel::Response>* ChannelService::Stub::AsyncDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeviceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChannelService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChannelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::channel::Response* resp) {
               return service->ProcessList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChannelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::channel::Response* resp) {
               return service->DiskInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChannelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::channel::Response* resp) {
               return service->NetworkActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::google::protobuf::Empty, ::channel::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChannelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::channel::Response* resp) {
               return service->DeviceInfo(ctx, req, resp);
             }, this)));
}

ChannelService::Service::~Service() {
}

::grpc::Status ChannelService::Service::ProcessList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::DiskInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::NetworkActivity(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::DeviceInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::channel::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace channel

